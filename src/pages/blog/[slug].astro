---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// Definice typu pro blog post
type BlogPost = CollectionEntry<'blog'>;

// Generuje všechny možné cesty pro blogy
export async function getStaticPaths() {
  const blogEntries: BlogPost[] = await getCollection('blog');
  return blogEntries.map((entry: BlogPost) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
  <Header />
  <main class="max-w-4xl mx-auto px-4 py-16">
    <article>
      <div class="mb-8">
        <img 
          src={entry.data.image || '/api/placeholder/800/400'} 
          alt={entry.data.title}
          class="w-full h-64 object-cover rounded-lg"
        />
      </div>

      <div class="mb-8">
        <div class="flex gap-2 mb-4">
          {entry.data.tags.map((tag: string) => (
            <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
              {tag}
            </span>
          ))}
        </div>

        <h1 class="text-4xl font-bold mb-4">
          {entry.data.title}
        </h1>

        <div class="flex items-center justify-between text-gray-600 mb-8">
          <div>
            <p class="font-semibold">{entry.data.author}</p>
            <p class="text-sm">{entry.data.authorRole}</p>
          </div>
          <time datetime={entry.data.publishDate} class="text-sm">
            {new Date(entry.data.publishDate).toLocaleDateString('cs-CZ')}
          </time>
        </div>

        <div class="text-lg text-gray-600 mb-6">
          {entry.data.excerpt}
        </div>
      </div>

      <div class="prose max-w-none">
        <Content />
      </div>

      <div class="mt-12 pt-8 border-t border-gray-200">
        <h2 class="text-2xl font-bold mb-4">Související články</h2>
        <div class="flex flex-wrap gap-2">
          {entry.data.tags.map((tag: string) => (
            <a
            href={`/blog?activeTag=${tag}`}
              class="px-3 py-1 bg-gray-100 hover:bg-blue-100 rounded-full text-sm transition-colors"
            >
              {tag}
            </a>
          ))}
        </div>
      </div>
    </article>

    <div class="mt-8 pt-8 border-t border-gray-200">
      <a 
        href="/blog"
        class="inline-flex items-center text-blue-600 hover:text-blue-800"
      >
        <svg 
          class="w-4 h-4 mr-2" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M15 19l-7-7 7-7"
          />
        </svg>
        Zpět na seznam článků
      </a>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  /* Styly pro Markdown obsah */
  .prose {
    @apply text-gray-800 leading-relaxed;
  }
  .prose h2 {
    @apply text-2xl font-bold mt-8 mb-4;
  }
  .prose h3 {
    @apply text-xl font-bold mt-6 mb-3;
  }
  .prose p {
    @apply mb-4;
  }
  .prose ul {
    @apply list-disc list-inside mb-4;
  }
  .prose ol {
    @apply list-decimal list-inside mb-4;
  }
  .prose a {
    @apply text-blue-600 hover:text-blue-800 underline;
  }
  .prose blockquote {
    @apply border-l-4 border-gray-200 pl-4 italic my-4;
  }
  .prose img {
    @apply rounded-lg my-6;
  }
  .prose code {
    @apply bg-gray-100 rounded px-1;
  }
  .prose pre {
    @apply bg-gray-100 rounded p-4 overflow-x-auto my-4;
  }
</style>