---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

type BlogPost = CollectionEntry<'blog'>;

const posts = await getCollection('blog');

// Explicitní typování pro tagy
const tagSet = new Set<string>();
posts.forEach((post: BlogPost) => {
  post.data.tags.forEach((tag: string) => tagSet.add(tag));
});
const allTags = Array.from(tagSet);

const sortedPosts = posts.sort((a: BlogPost, b: BlogPost) => 
  new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
);
---

<Layout title="Blog - Superior Medical">
  <Header />
  <main class="py-16">
    <div class="max-w-7xl mx-auto px-4">
      <h1 class="text-4xl font-bold mb-8 text-center">Blog</h1>
      
      <div class="mb-12">
        <div class="w-full max-w-xl mx-auto mb-8">
          <input
            type="text"
            id="search"
            placeholder="Hledat v článcích..."
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div class="mb-8">
          <h3 class="text-lg font-semibold mb-3">Filtrovat podle témat</h3>
          <div class="flex flex-wrap gap-2" id="tag-container">
            {allTags.map((tag: string) => (
              <button class="px-3 py-1 bg-gray-100 hover:bg-blue-100 rounded-full text-sm tag-filter" data-tag={tag}>
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>

      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" id="blog-posts">
        {sortedPosts.map((post: BlogPost) => (
          <article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            <a href={`/blog/${post.slug}`}>
              <img
                src={post.data.image || '/api/placeholder/800/400'}
                alt={post.data.title}
                class="w-full h-48 object-cover"
              />
              <div class="p-6">
                <div class="flex gap-2 mb-3">
                  {post.data.tags.map((tag: string) => (
  <span class="tag px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
    {tag}
                    </span>
                  ))}
                </div>
                <h2 class="text-xl font-bold mb-2">{post.data.title}</h2>
                <p class="text-gray-600 mb-4">{post.data.excerpt}</p>
                <div class="flex items-center justify-between text-sm text-gray-500">
                  <span>{post.data.author}</span>
                  <time>{new Date(post.data.publishDate).toLocaleDateString('cs-CZ')}</time>
                </div>
              </div>
            </a>
          </article>
        ))}
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<script>
 document.addEventListener('DOMContentLoaded', initializeFiltering);
window.addEventListener('pageshow', initializeFiltering);

function initializeFiltering() {
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const blogPosts = document.getElementById('blog-posts');
  let currentTag: string | null = null;

  function filterPosts() {
    const searchTerm = (searchInput?.value || '').toLowerCase();
    const posts = document.querySelectorAll('#blog-posts article');

    posts.forEach(post => {
      const title = post.querySelector('h2')?.textContent?.toLowerCase() || '';
      const excerpt = post.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = Array.from(post.querySelectorAll('.tag')).map(tag => 
        tag.textContent?.trim().toLowerCase() || ''
      );

      const hasTag = !currentTag || tags.includes(currentTag.toLowerCase());
      const matchesSearch = title.includes(searchTerm) || excerpt.includes(searchTerm);

      (post as HTMLElement).style.display = (hasTag && matchesSearch) ? '' : 'none';
    });
  }

  const urlParams = new URLSearchParams(window.location.search);
  const tagFromUrl = urlParams.get('activeTag');
  
  if (tagFromUrl) {
    currentTag = tagFromUrl;
    const tagButton = document.querySelector(`.tag-filter[data-tag="${tagFromUrl}"]`);
    if (tagButton) {
      tagButton.classList.add('bg-blue-500', 'text-white');
      filterPosts();
    }
  }

  searchInput?.addEventListener('input', filterPosts);

  document.querySelectorAll('.tag-filter').forEach(button => {
    button.addEventListener('click', () => {
      const tag = (button as HTMLElement).dataset.tag;
      if (!tag) return;

      document.querySelectorAll('.tag-filter').forEach(btn => 
        btn.classList.remove('bg-blue-500', 'text-white')
      );

      if (currentTag === tag) {
        currentTag = null;
        const url = new URL(window.location.href);
        url.searchParams.delete('activeTag');
        window.history.pushState({}, '', url);
      } else {
        currentTag = tag;
        button.classList.add('bg-blue-500', 'text-white');
        const url = new URL(window.location.href);
        url.searchParams.set('activeTag', tag);
        window.history.pushState({}, '', url);
      }

      filterPosts();
    });
  });
}
  </script>